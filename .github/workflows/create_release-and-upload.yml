name: create-release-upload

on: 
  push:
    tags:
    - 'v*'

jobs:
  create_releases:
    name: create-releases
    runs-on: ubuntu-18.04
    outputs:
      release_url: ${{ steps.output_url.outputs.upload_url }}

    steps:
    - name: checkout
      uses: actions/checkout@v1
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: true
      continue-on-error: true
    - name: Get release
      if: steps.create_release.outcome == 'failure'
      id: get_release
      uses: bruceadams/get-release@v1.2.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: output url
      id: output_url
      run: |
        echo "::set-output name=upload_url::${{steps.get_release.outputs.upload_url}}${{steps.create_release.outputs.upload_url}}"

  upload-object-windows:
    name: upload-object-win
    needs: create_releases
    runs-on: windows-2019
    strategy:
      matrix:
        dotnet_target: [3.1, 5.0]
        include:
          - dotnet_target: 3.1
            dotnet_version: 3.1.412
            framework: netstandard2.1
            script_suffix: _core3
          - dotnet_target: 5.0
            dotnet_version: 5.0.400
            framework: net5.0
            script_suffix:

    steps:
    - name: setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet_version }}
    - name: checkout
      uses: actions/checkout@v2
    - name: output url
      id: get_url
      run: echo "::set-output name=upload_url::${{ needs.create_releases.outputs.release_url }}"
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash
    - name: dump version
      env:
        version: ${{ steps.get_version.outputs.VERSION }}
      run: echo "version=${version}"
      shell: bash
    - name: cmake-build
      run: |
        .\tools\build${{matrix.script_suffix}}.bat
        .\tools\test${{matrix.script_suffix}}.bat
      timeout-minutes: 20
    - name: cmake-install
      shell: cmd
      run: |
        mkdir dist
        COPY /Y /B dotnet_project\CfdCsharpProject\bin\Release\${{matrix.framework}}\cfdcs.* dist
        COPY /Y /B build\Release\* dist
    - name: create archive file
      run: |
        cd dist
        del gen_context.exe
        Compress-Archive -Path ./* -DestinationPath ../cfd.zip
        cd ..
        echo "---- dump zip file ----"
        dir .
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_url.outputs.upload_url }}
        asset_path: ./cfd.zip
        asset_name: cfdcs-${{ steps.get_version.outputs.VERSION }}-win-dotnet${{matrix.dotnet_version}}-msvc2019-x86_64.zip
        asset_content_type: application/zip

  upload-object-ubuntu:
    name: upload-object-ubuntu
    needs: create_releases
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        dotnet_target: [3.1, 5.0]
        include:
          - dotnet_target: 3.1
            dotnet_version: 3.1.412
            framework: netstandard2.1
            script_suffix: _core3
          - dotnet_target: 5.0
            dotnet_version: 5.0.400
            framework: net5.0
            script_suffix:

    steps:
    - name: setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet_version }}
    - name: checkout
      uses: actions/checkout@v1
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: cmake-build
      run: |
        ./tools/build${{matrix.script_suffix}}.sh
    - name: test
      run: |
        ./tools/test${{matrix.script_suffix}}.sh
    - name: create archive file
      run: |
        mkdir dist
        cp -rp build/Release/* dist
        cp -rp dotnet_project/CfdCsharpProject/bin/Release/${{matrix.framework}}/cfdcs.* dist
        cd dist
        zip -r cfd.zip .
        echo "---- dump zip file ----"
        ls -l
    - name: output url
      id: get_url
      run: echo "::set-output name=upload_url::${{ needs.create_releases.outputs.release_url }}"
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_url.outputs.upload_url }}
        asset_path: ./dist/cfd.zip
        asset_name: cfdcs-${{ steps.get_version.outputs.VERSION }}-${{ matrix.os }}-dotnet${{matrix.dotnet_version}}-gcc-x86_64.zip
        asset_content_type: application/zip

  upload-object-macos:
    name: upload-object-macos
    needs: create_releases
    runs-on: macos-10.15
    strategy:
      matrix:
        xcode_version: [11.7, 12.4]
        dotnet_target: [3.1, 5.0]
        exclude:
          - xcode_version: 12.4
            dotnet_target: 3.1
        include:
          - dotnet_target: 3.1
            dotnet_version: 3.1.412
            framework: netstandard2.1
            script_suffix: _core3
          - dotnet_target: 5.0
            dotnet_version: 5.0.400
            framework: net5.0
            script_suffix:

    steps:
    - name: setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet_version }}
    - name: checkout
      uses: actions/checkout@v1
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Select Xcode version
      run: sudo xcode-select -s '/Applications/Xcode_${{matrix.xcode_version}}.app/Contents/Developer'
    - name: Show Xcode version
      run: xcodebuild -version
    - name: cmake-build
      run: |
        ./tools/build${{matrix.script_suffix}}.sh
    - name: test
      run: |
        ./tools/test${{matrix.script_suffix}}.sh
    - name: create archive file
      run: |
        mkdir dist
        cp -rp build/Release/* dist
        cp -rp dotnet_project/CfdCsharpProject/bin/Release/${{matrix.framework}}/cfdcs.* dist
        cd dist
        zip -r cfd.zip .
        echo "---- dump zip file ----"
        ls -l
    - name: output url
      id: get_url
      run: echo "::set-output name=upload_url::${{ needs.create_releases.outputs.release_url }}"
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_url.outputs.upload_url }}
        asset_path: ./dist/cfd.zip
        asset_name: cfdcs-${{ steps.get_version.outputs.VERSION }}-macos-dotnet${{matrix.dotnet_version}}-xcode${{matrix.xcode_version}}-x86_64.zip
        asset_content_type: application/zip

